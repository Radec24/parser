import asyncio
import csv
import logging
import os
import time
from datetime import datetime, timezone
from pathlib import Path
from typing import Dict, List, Set, Tuple, Optional

from telethon import TelegramClient, events, errors
from telethon.tl.types import Channel  # –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞ —á–∞—Ç–∞

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ CONFIG ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #

API_ID: Optional[int] = int(os.getenv("API_ID", "0")) or None
API_HASH: Optional[str] = os.getenv("API_HASH")
BOT_TOKEN: Optional[str] = os.getenv("BOT_TOKEN")

if not all((API_ID, API_HASH, BOT_TOKEN)):
    raise RuntimeError("API_ID / API_HASH / BOT_TOKEN –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

keyword_groups: List[dict] = [
    {
        "name": "wallets",
        "keywords_file": "wallets_keywords.txt",
        "target_chat_id": int(os.getenv("TARGET_CHAT_ID", "0")),
        "csv_file": "log.csv",
    },
]

PROCESSED_TTL = 24 * 60 * 60  # 24 —á–∞—Å–∞ ‚Äì –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ LOGGING ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s ‚Äî %(message)s",
)
logger = logging.getLogger("parser")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ UTILITIES ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #


def load_keywords(path: str) -> Set[str]:
    """–ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞—è –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏."""
    p = Path(path)
    if not p.exists():
        logger.warning("–§–∞–π–ª –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ %s –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç", path)
        return set()
    with p.open(encoding="utf-8") as fh:
        return {line.strip().lower() for line in fh if line.strip() and not line.startswith("#")}


def find_keyword(text: str, keywords: Set[str]) -> Optional[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ None."""
    text_lc = text.lower()
    for kw in keywords:
        if kw in text_lc:
            return kw
    return None


def tg_link(chat, msg_id: int) -> str:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    ‚Ä¢ –î–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø ‚Äî https://t.me/username/<id>
    ‚Ä¢ –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Å—É–ø–µ—Ä-–≥—Ä—É–ø–ø  ‚Äî https://t.me/c/<internal>/<id>
    ‚Ä¢ –î–ª—è –º–∞–ª—ã—Ö –≥—Ä—É–ø–ø —Å—Å—ã–ª–∫–∏ –Ω–µ—Ç ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç "‚Äî"
    """
    username = getattr(chat, "username", None)
    if username:  # –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        return f"https://t.me/{username}/{msg_id}"

    if isinstance(chat, Channel):  # –ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Å—É–ø–µ—Ä-–≥—Ä—É–ø–ø–∞
        return f"https://t.me/c/{abs(chat.id) - 10 ** 12}/{msg_id}"

    return "‚Äî"  # –æ–±—ã—á–Ω–∞—è (–º–∞–ª–∞—è) –≥—Ä—É–ø–ø–∞

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ WRAPPER ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #


class GroupData:
    __slots__ = ("name", "keywords", "target_chat_id", "csv_writer")

    def __init__(self, cfg: dict):
        self.name: str = cfg["name"]
        self.keywords: Set[str] = load_keywords(cfg["keywords_file"])
        self.target_chat_id: int = cfg["target_chat_id"]

        csv_file = cfg.get("csv_file")
        if csv_file:
            path = Path(csv_file)
            path.parent.mkdir(parents=True, exist_ok=True)
            self.csv_writer = path.open("a", newline="", encoding="utf-8")
            if path.stat().st_size == 0:
                csv.writer(self.csv_writer).writerow(
                    ["datetime_utc", "chat_id", "message_id", "text"]
                )
        else:
            self.csv_writer = None


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ MAIN ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #


async def main() -> None:
    """–°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –æ–¥–Ω–æ–º event-loop –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä."""
    user_client = TelegramClient("user_session", API_ID, API_HASH)
    bot_client = TelegramClient("bot_session", API_ID, API_HASH)

    await bot_client.start(bot_token=BOT_TOKEN)
    await user_client.start()

    groups = [GroupData(cfg) for cfg in keyword_groups]
    processed: Dict[Tuple[int, int], float] = {}

    # ‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï handler ‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï #
    async def on_new_message(event: events.NewMessage.Event) -> None:
        msg = event.message
        chat = await event.get_chat()

        key = (chat.id, msg.id)
        if key in processed:
            return
        processed[key] = time.time()
        # –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏
        now = time.time()
        processed_keys = [k for k, ts in processed.items() if now - ts > PROCESSED_TTL]
        for k in processed_keys:
            del processed[k]

        for g in groups:
            if chat.id == g.target_chat_id:
                continue  # –Ω–µ –ª–æ–≤–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

            kw = find_keyword(msg.message or "", g.keywords)
            if kw:
                link = tg_link(chat, msg.id)
                anchor = (
                    f'<a href="{link}">–û—Ç–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</a>'
                    if link != "‚Äî"
                    else "–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
                )
                text = (
                    f"üö® –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∞–¥—Ä–µ—Å—É:<b>{kw}</b>\n"
                    f"–û—Ä–∏–≥–∏–Ω–∞–ª —Å–æ–æ–±—â–µ–Ω–∏—è:"
                    f"{msg.message}\n\n"
                    f"{anchor}"
                )

                try:
                    await bot_client.send_message(
                        g.target_chat_id,
                        text,
                        parse_mode="html",
                        link_preview=True,
                    )
                    logger.info("‚û°Ô∏è  –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ ¬´%s¬ª –ø–µ—Ä–µ—Å–ª–∞–Ω–æ (%s)", kw, link)
                except errors.rpcerrorlist.FloodWaitError as e:
                    logger.warning("FloodWait %d s, —Å–ø–∏–º‚Ä¶", e.seconds)
                    await asyncio.sleep(e.seconds)

                if g.csv_writer:
                    csv.writer(g.csv_writer).writerow(
                        [
                            datetime.now(timezone.utc).isoformat(timespec="seconds"),
                            chat.id,
                            msg.id,
                            (msg.message or "").replace("\n", " "),
                        ]
                    )
                    g.csv_writer.flush()

    user_client.add_event_handler(on_new_message, events.NewMessage)

    logger.info("–ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω, –∂–¥—ë–º —Å–æ–æ–±—â–µ–Ω–∏—è‚Ä¶")
    await user_client.run_until_disconnected()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
