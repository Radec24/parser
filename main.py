import asyncio
import csv
import logging
import os
import time
from datetime import datetime, timezone
from pathlib import Path
from typing import Dict, List, Set, Tuple

from telethon import TelegramClient, events, errors

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ CONFIG ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #

API_ID: int | None = int(os.getenv("API_ID", "0")) or None
API_HASH: str | None = os.getenv("API_HASH")
BOT_TOKEN: str | None = os.getenv("BOT_TOKEN")

if not all((API_ID, API_HASH, BOT_TOKEN)):
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è API_ID / API_HASH / BOT_TOKEN")

# –≥—Ä—É–ø–ø—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
keyword_groups: List[dict] = [
    {
        "name": "wallets",                           # –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ ¬´—á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ¬ª –Ω–∞–∑–≤–∞–Ω–∏–µ
        "keywords_file": "wallets_keywords.txt",     # —Å–ø–∏—Å–æ–∫ –∏—Å–∫–æ–º—ã—Ö –∞–¥—Ä–µ—Å–æ–≤/—Å–ª–æ–≤
        "target_chat_id": int(os.getenv("TARGET_CHAT_ID", "0")),
        "csv_file": "log.csv",                       # –∂—É—Ä–Ω–∞–ª —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (–º–æ–∂–Ω–æ None)
    },
]

PROCESSED_TTL = 24 * 60 * 60  # 24 —á ‚Äî –∫—ç—à —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ LOGGING ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s ‚Äî %(message)s",
)
logger = logging.getLogger("parser")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ UTILITIES ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #


def load_keywords(path: str) -> Set[str]:
    """–ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏."""
    p = Path(path)
    if not p.exists():
        logger.warning("–§–∞–π–ª %s –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ 0", path)
        return set()
    with p.open(encoding="utf-8") as fh:
        return {ln.strip().lower() for ln in fh if ln.strip() and not ln.startswith("#")}


def find_keyword(text: str, keywords: Set[str]) -> str | None:
    """–í–µ—Ä–Ω—ë—Ç –ø–µ—Ä–≤–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –≤ —Ç–µ–∫—Å—Ç–µ, –∏–Ω–∞—á–µ None."""
    text_lc = text.lower()
    for kw in keywords:
        if kw in text_lc:
            return kw
    return None


def tg_link(chat, msg_id: int) -> str:
    """–°—Ç—Ä–æ–∏—Ç –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    if chat.username:
        return f"https://t.me/{chat.username}/{msg_id}"
    return f"https://t.me/c/{abs(chat.id) - 10 ** 12}/{msg_id}"


def purge(cache: Dict[Tuple[int, int], float]) -> None:
    """–£–¥–∞–ª—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –∫—ç—à–∞ processed."""
    now = time.time()
    for key in [k for k, ts in cache.items() if now - ts > PROCESSED_TTL]:
        del cache[key]


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ WRAPPER ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #


class GroupData:
    __slots__ = ("name", "keywords", "target_chat_id", "csv_writer")

    def __init__(self, cfg: dict):
        self.name: str = cfg["name"]
        self.keywords: Set[str] = load_keywords(cfg["keywords_file"])
        self.target_chat_id: int = cfg["target_chat_id"]

        csv_file = cfg.get("csv_file")
        if csv_file:
            path = Path(csv_file)
            path.parent.mkdir(parents=True, exist_ok=True)
            self.csv_writer = path.open("a", newline="", encoding="utf-8")
            if path.stat().st_size == 0:
                csv.writer(self.csv_writer).writerow(
                    ["datetime_utc", "chat_id", "message_id", "text"]
                )
        else:
            self.csv_writer = None


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ MAIN ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #


async def main() -> None:
    """–°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ event-loop –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä."""
    user_client = TelegramClient("user_session", API_ID, API_HASH)
    bot_client = TelegramClient("bot_session", API_ID, API_HASH)

    await bot_client.start(bot_token=BOT_TOKEN)
    await user_client.start()

    groups = [GroupData(cfg) for cfg in keyword_groups]
    processed: Dict[Tuple[int, int], float] = {}

    # ‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï handler ‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï #
    async def on_new_message(event: events.NewMessage.Event) -> None:
        msg = event.message
        chat = await event.get_chat()

        key = (chat.id, msg.id)
        if key in processed:
            return
        processed[key] = time.time()
        purge(processed)

        for g in groups:
            if chat.id == g.target_chat_id:
                continue  # –Ω–µ –ª–æ–≤–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

            kw = find_keyword(msg.message or "", g.keywords)
            if kw:
                link = tg_link(chat, msg.id)
                text = (
                    f"üö® –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∞–¥—Ä–µ—Å—É –∫–æ—à–µ–ª—å–∫–∞:<b>{kw}</b>\n"
                    f"{msg.message}\n\n"
                    f'<a href="{link}">–û—Ç–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</a>'
                )
                try:
                    await bot_client.send_message(
                        g.target_chat_id,
                        text,
                        parse_mode="html",
                        link_preview=False,
                    )
                    logger.info("–ü–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–æ–º ¬´%s¬ª - %s", kw, link)
                except errors.rpcerrorlist.FloodWaitError as e:
                    logger.warning("FloodWait %d s", e.seconds)
                    await asyncio.sleep(e.seconds)

                if g.csv_writer:
                    csv.writer(g.csv_writer).writerow(
                        [
                            datetime.now(timezone.utc).isoformat(timespec="seconds"),
                            chat.id,
                            msg.id,
                            (msg.message or "").replace("\n", " "),
                        ]
                    )
                    g.csv_writer.flush()

    user_client.add_event_handler(on_new_message, events.NewMessage)

    logger.info("–ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω, –∂–¥—ë–º —Å–æ–æ–±—â–µ–Ω–∏–π‚Ä¶")
    await user_client.run_until_disconnected()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
