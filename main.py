import asyncio
import csv
import logging
import os
import time
from datetime import datetime, timezone
from pathlib import Path
from typing import Dict, List, Set, Tuple, Optional

from telethon import TelegramClient, events, errors
from telethon.tl.types import Channel  # –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞ —á–∞—Ç–∞

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ CONFIG ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #

API_ID: Optional[int] = int(os.getenv("API_ID", "0")) or None
API_HASH: Optional[str] = os.getenv("API_HASH")
BOT_TOKEN: Optional[str] = os.getenv("BOT_TOKEN")

if not all((API_ID, API_HASH, BOT_TOKEN)):
    raise RuntimeError("API_ID / API_HASH / BOT_TOKEN –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

keyword_groups: List[dict] = [
    {
        "name": "wallets",
        "keywords_file": "wallets_keywords.txt",
        "target_chat_id": int(os.getenv("TARGET_CHAT_ID", "0")),
        "csv_file": "log.csv",
    },
]

PROCESSED_TTL = 24 * 60 * 60  # 24 —á ‚Äî –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ LOGGING ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s ‚Äî %(message)s",
)
logger = logging.getLogger("parser")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ UTILITIES ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #


def load_keywords(path: str) -> Dict[str, str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {keyword_lower: alias}.

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Ç—Ä–æ–∫ –≤ wallets_keywords.txt:
        keyword|alias
        keyword:alias
        keyword,alias
        keyword            # alias = keyword

    –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å ¬´#¬ª, –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è.
    """
    p = Path(path)
    if not p.exists():
        logger.warning("–§–∞–π–ª –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ %s –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç", path)
        return {}

    mapping: Dict[str, str] = {}
    with p.open(encoding="utf-8") as fh:
        for raw in fh:
            line = raw.strip()
            if not line or line.startswith("#"):
                continue

            for sep in ("|", ":", ","):
                if sep in line:
                    kw, alias = map(str.strip, line.split(sep, 1))
                    break
            else:
                kw, alias = line, line

            mapping[kw.lower()] = alias
    return mapping


def find_keyword(text: str, kw_map: Dict[str, str]) -> Optional[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Å–µ–≤–¥–æ–Ω–∏–º –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    –∏–ª–∏ None, –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç.
    """
    text_lc = text.lower()
    for kw, alias in kw_map.items():
        if kw in text_lc:
            return alias
    return None


def tg_link(chat, msg_id: int) -> str:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    ‚Ä¢ –ü—É–±–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã ‚Äî https://t.me/<username>/<id>
    ‚Ä¢ –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã       ‚Äî https://t.me/c/<internal>/<id>
    ‚Ä¢ –ú–∞–ª—ã–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã —Å—Å—ã–ª–∫–∏ –Ω–µ –∏–º–µ—é—Ç ‚Üí ¬´‚Äî¬ª
    """
    username = getattr(chat, "username", None)
    if username:  # –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        return f"https://t.me/{username}/{msg_id}"

    if isinstance(chat, Channel):  # –ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞
        return f"https://t.me/c/{abs(chat.id) - 10 ** 12}/{msg_id}"

    return "‚Äî"  # –æ–±—ã—á–Ω–∞—è (–º–∞–ª–∞—è) –≥—Ä—É–ø–ø–∞


class DupCache:
    """–ü—Ä–æ—Å—Ç–µ–π—à–∏–π TTL-–∫—ç—à, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π."""

    def __init__(self, ttl: int = PROCESSED_TTL):
        self.ttl = ttl
        self._cache: Dict[Tuple[int, int], float] = {}

    def add(self, chat_id: int, msg_id: int) -> bool:
        """True, –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ (chat_id, msg_id) –Ω–µ –±—ã–ª–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ ttl —Å–µ–∫—É–Ω–¥."""
        key = (chat_id, msg_id)
        now = time.time()
        # —á–∏—Å—Ç–∏–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        self._cache = {k: v for k, v in self._cache.items() if now - v < self.ttl}
        if key in self._cache:
            return False
        self._cache[key] = now
        return True


class GroupData:
    __slots__ = ("name", "keywords", "target_chat_id", "csv_writer")

    def __init__(self, cfg: dict):
        self.name: str = cfg["name"]
        # —Ç–µ–ø–µ—Ä—å —ç—Ç–æ Dict[str, str] {keyword: alias}
        self.keywords: Dict[str, str] = load_keywords(cfg["keywords_file"])
        self.target_chat_id: int = cfg["target_chat_id"]

        csv_file = cfg.get("csv_file")
        if csv_file:
            path = Path(csv_file)
            path.parent.mkdir(parents=True, exist_ok=True)
            self.csv_writer = path.open("a", newline="", encoding="utf-8")
            if path.stat().st_size == 0:
                csv.writer(self.csv_writer).writerow(
                    ["datetime_utc", "chat_id", "message_id", "text"]
                )
        else:
            self.csv_writer = None


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ MAIN LOGIC ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #


async def main() -> None:
    """–°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –æ–¥–Ω–æ–º event-loop –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä."""
    user_client = TelegramClient("user_session", API_ID, API_HASH)
    bot_client = TelegramClient("bot_session", API_ID, API_HASH)

    await bot_client.start(bot_token=BOT_TOKEN)
    await user_client.start()

    groups = [GroupData(cfg) for cfg in keyword_groups]
    dup_cache = DupCache()

    # ‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï handler ‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï #
    async def on_new_message(event: events.NewMessage.Event) -> None:
        msg = event.message
        chat = await event.get_chat()

        # —Å–º–æ—Ç—Ä–∏–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —á–∞—Ç –∫ –∫–∞–∫–æ–º—É-–Ω–∏–±—É–¥—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö
        g: Optional[GroupData] = next((x for x in groups if x.target_chat_id and chat.id), None)
        if g is None:
            return

        # —Ñ–∏–ª—å—Ç—Ä –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        if not dup_cache.add(chat.id, msg.id):
            return

        # –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ü–∏–∫–ª–∏—Ç—å—Å—è
        if msg.out and msg.to_id and getattr(msg.to_id, "channel_id", None) == g.target_chat_id:
            return

        kw_alias = find_keyword(msg.message or "", g.keywords)
        if kw_alias:
            link = tg_link(chat, msg.id)
            anchor = (
                f'<a href="{link}">–û—Ç–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</a>' if link != "‚Äî" else "–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            )
            text = (
                f"üö® –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∞–¥—Ä–µ—Å—É:\n<b>{kw_alias}</b>\n"
                f"–û—Ä–∏–≥–∏–Ω–∞–ª —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
                f"{msg.message}\n"
                f"{anchor}"
            )

            try:
                await bot_client.send_message(
                    g.target_chat_id,
                    text,
                    parse_mode="html",
                    link_preview=True,
                )
                logger.info("‚û°Ô∏è  –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ ¬´%s¬ª –ø–µ—Ä–µ—Å–ª–∞–Ω–æ (%s)", kw_alias, link)
            except errors.ChatWriteForbiddenError:
                logger.error("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –ø–∏—Å–∞—Ç—å –≤ —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç %s", g.target_chat_id)
            except Exception as exc:
                logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", exc)

        # –ª–æ–≥–∏—Ä—É–µ–º –≤—Å—ë, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω csv_file
        if g.csv_writer:
            csv.writer(g.csv_writer).writerow(
                [
                    datetime.now(timezone.utc).isoformat(timespec="seconds"),
                    chat.id,
                    msg.id,
                    (msg.message or "").replace("\n", " "),
                ]
            )
            g.csv_writer.flush()

    user_client.add_event_handler(on_new_message, events.NewMessage)

    logger.info("–ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω, –∂–¥—ë–º —Å–æ–æ–±—â–µ–Ω–∏—è‚Ä¶")
    await user_client.run_until_disconnected()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
